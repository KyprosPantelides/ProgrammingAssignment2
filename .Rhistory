makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a<-c(4,5,6,1,8,9)
cachemean(a)
a
x <- c(10.4, 5.6, 3.1, 6.4, 21.7)
cachemean(x)
makevector(a)
makeVector(a)
makeVector(a)
cachemean(a)
makeVector(x)
m
cachemean(a)
cachemean(a)
x
b<-c(10.4, 5.6, 3.1, 6.4, 21.7)
makeVector(b)
cachemean(a)
m
y
V<-makeVector(a)
v
v$set(20:40)
v <- makeVector()
v$set(20:40)
v$get()
cachemean(v)
cachemean(v)
v$set(c(23,23,34.6,654.35))
cachemean(v)
cachemean(v)
v$get(c(23,23,34.6,654.35))
v$get
v$get[1]
makeVector(c(4,5,6,1,8,9))
v<-makeVector(c(4,5,6,1,8,9))
v<-makeVector(a
)
v<-makeVector(b)
cachemean(b)
cachemean(v)
v<-makeVector(a)
cachemean(v)
cachemean(v)
v$set
v$get
ls(environment(get))
g = get()
g
g = get(x)
g = get()
get = function() x
g = get()
g = get()
g
v$get()
v$getmean()
v$setmean()
v$set()
a <- array(1:25, dim=c(5,5))
source(cachematrix.R)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
v<-makeCacheMatrix(a)
cacheSolve(v)
a <- array(c(1,3,2,4,6,7,0,2,4,5,0,3,43,2,34,5,65,7,9,0,65,32,89,65), dim=c(5,5))
a
cacheSolve(v)
v<-makeCacheMatrix(a)
cacheSolve(v)
a <- array(c(0,2,2,0), dim=c(2,2))
v<-makeCacheMatrix(a)
cacheSolve(v)
